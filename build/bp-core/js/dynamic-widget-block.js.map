{"version":3,"sources":["bp-core/js/dynamic-widget-block.js"],"names":["url","addQueryArgs","wp","template","lodash","window","bp","dynamicWidgetBlock","constructor","settings","blocks","path","root","nonce","document","querySelector","classList","contains","length","forEach","block","i","type","query_args","body","preloaded","items","useTemplate","tmpl","innerHTML","evaluate","interpolate","escape","variable","loop","getItems","blockIndex","selector","fetch","method","headers","then","response","json","data"],"mappings":";AAGA,MACCA,KAAK,aACJC,IAEEC,IAKE,SACLC,GACGC,OAGJC,OAAOC,GAAKD,OAAOC,IAAM,GAOzBA,GAAGC,mBAAqB,MACvBC,YAAaC,EAAUC,GAChB,MAAA,KAAEC,EAAF,KAAQC,EAAR,MAAcC,GAAUJ,EACzBE,KAAAA,KAAOA,EACPC,KAAAA,KAAOA,EACPC,KAAAA,MAAQA,EACb,KAAKH,OAASA,GAAU,IAEjBI,SAASC,cAAe,QAASC,UAAUC,SAAU,aAAgB,KAAKP,OAAOQ,QAClFR,KAAAA,OAAOS,QAAS,CAAEC,EAAOC,KACvB,MAAA,KAAEC,GAASF,EAAMG,YAAc,UAC/B,KAAEC,GAASJ,EAAMK,WAAa,GAE/Bf,KAAAA,OAAQW,GAAIK,MAAQ,CACd,OAAA,GACA,OAAA,GACC,QAAA,GACK,aAAA,KAGV,KAAKhB,OAAQW,GAAIK,MAAOJ,GAAOJ,QAAUM,GAAQA,EAAKN,SACvDR,KAAAA,OAAQW,GAAIK,MAAOJ,GAASE,KAMrCG,YAAaC,GAQLzB,OAAAA,EAAUW,SAASC,cAAe,SAAWa,GAAOC,UAP3C,CACfC,SAAa,kBACbC,YAAa,0BACbC,OAAa,2BACbC,SAAa,SAMfC,QAIAC,SAAUb,EAAO,SAAUc,EAAa,GAClC1B,KAAAA,OAAQ0B,GAAab,WAAWD,KAAOA,EAEvC,KAAKZ,OAAQ0B,GAAaV,MAAOJ,GAAOJ,OACvCgB,KAAAA,KAAM,KAAKxB,OAAQ0B,GAAaV,MAAOJ,GAAQ,KAAKZ,OAAQ0B,GAAaC,SAAUf,GAExFgB,MAAOrC,EAAc,KAAKW,KAAO,KAAKD,KAAM,KAAKD,OAAQ0B,GAAab,YAAc,CACnFgB,OAAQ,MACRC,QAAS,CACO,aAAA,KAAK3B,SAElB4B,KACDC,GAAcA,EAASC,QACxBF,KACCG,IACIlC,KAAAA,OAAQ0B,GAAaV,MAAOJ,GAASsB,EACrCV,KAAAA,KAAM,KAAKxB,OAAQ0B,GAAaV,MAAOJ,GAAQ,KAAKZ,OAAQ0B,GAAaC,SAAUf","file":"dynamic-widget-block.js","sourceRoot":"../src","sourcesContent":["/**\n * WordPress dependencies.\n */\nconst {\n\turl: {\n\t\taddQueryArgs,\n\t},\n} = wp;\n\n/**\n * External dependencies.\n */\nconst {\n\ttemplate,\n} = lodash;\n\n// Use the bp global.\nwindow.bp = window.bp || {};\n\n/**\n * Generic class to be used by Dynamic Widget Blocks.\n *\n * @since 9.0.0\n */\nbp.dynamicWidgetBlock = class bpDynamicWidgetBlock {\n\tconstructor( settings, blocks ) {\n\t\tconst { path, root, nonce } = settings;\n\t\tthis.path = path;\n\t\tthis.root = root;\n\t\tthis.nonce = nonce,\n\t\tthis.blocks = blocks || [];\n\n\t\tif ( ! document.querySelector( 'body' ).classList.contains( 'wp-admin' ) && this.blocks.length ) {\n\t\t\tthis.blocks.forEach( ( block, i ) => {\n\t\t\t\tconst { type } = block.query_args || 'active';\n\t\t\t\tconst { body } = block.preloaded || [];\n\n\t\t\t\tthis.blocks[ i ].items = {\n\t\t\t\t\t'active': [],\n\t\t\t\t\t'newest': [],\n\t\t\t\t\t'popular': [],\n\t\t\t\t\t'alphabetical': [],\n\t\t\t\t}\n\n\t\t\t\tif ( ! this.blocks[ i ].items[ type ].length && body && body.length ) {\n\t\t\t\t\tthis.blocks[ i ].items[ type ] = body;\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t}\n\n\tuseTemplate( tmpl ) {\n\t\tconst options = {\n\t\t\tevaluate:    /<#([\\s\\S]+?)#>/g,\n\t\t\tinterpolate: /\\{\\{\\{([\\s\\S]+?)\\}\\}\\}/g,\n\t\t\tescape:      /\\{\\{([^\\}]+?)\\}\\}(?!\\})/g,\n\t\t\tvariable:    'data'\n\t\t};\n\n\t\treturn template( document.querySelector( '#tmpl-' + tmpl ).innerHTML, options );\n\t}\n\n\tloop() {\n\t\t// This method needs to be overriden.\n\t}\n\n\tgetItems( type = 'active', blockIndex = 0 ) {\n\t\tthis.blocks[ blockIndex ].query_args.type = type;\n\n\t\tif ( this.blocks[ blockIndex ].items[ type ].length ) {\n\t\t\tthis.loop( this.blocks[ blockIndex ].items[ type ], this.blocks[ blockIndex ].selector, type );\n\t\t} else {\n\t\t\tfetch( addQueryArgs( this.root + this.path, this.blocks[ blockIndex ].query_args ), {\n\t\t\t\tmethod: 'GET',\n\t\t\t\theaders: {\n\t\t\t\t\t'X-WP-Nonce' : this.nonce,\n\t\t\t\t}\n\t\t\t} ).then(\n\t\t\t\t( response ) => response.json()\n\t\t\t).then(\n\t\t\t\t( data ) => {\n\t\t\t\t\tthis.blocks[ blockIndex ].items[ type ] = data;\n\t\t\t\t\tthis.loop( this.blocks[ blockIndex ].items[ type ], this.blocks[ blockIndex ].selector, type );\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t}\n};\n"]}